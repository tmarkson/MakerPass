---
# First we define a unique id for this node
id: missiles-ex
# And maybe add a description (this is optional)
description: Missile Launching Example
# We can specifically associate a node to an interface
interface: Fake
# Define our inputs...  For this node we have 3 inputs defined.  The key for
# each input is the input number on the MakerPass node circuit board.
inputs:
  # The launch system consists of two missile keys, a code-entry keypad and a
  # launch button.  In order to launch the missiles you must press the launch
  # button while both launch keys are turned on and the correct code has been
  # entered on the keypad.
  1: missile_key_a
  2: missile_key_b
  3: missile_keypad
  3: launch_button
  # Pressing the abort button cancels the countdown if the missiles haven't
  # been launched yet or activates their self_destruct if they have launched.
  4: abort_button
  # A reset keyswitch that can reset the alarm_activation counter, and reset
  # the alarm if it's currently sounding.
  5: reset_button
# and now the outputs...
outputs:
  # The missile_actuator launches the missiles
  1: missile_actuator
  # The missile_self_destruct output activates the self-destruct systems
  2: missile_self_destruct
  # A buzzer that sounds if you press the launch button while one of the
  # keys isn't on
  3: buzzer
  # An alarm that sounds if you try to launch the missiles incorrectly
  # too many times
  4: alarm
  
# We also have to define some variables for information storage
variables:
  missile_launch_timer: timer
  alarm_counter: counter

# Now we define the events that dictate how the inputs and outputs interact
events:

  # These just log messages when the missile_launch_timer hits specific values
  missile_launch_timer=10: log 'launching in 10...'
  missile_launch_timer=9: log 'launching in 9...'
  missile_launch_timer=8: log 'launching in 8...'
  missile_launch_timer=7: log 'launching in 7...'
  missile_launch_timer=6: log 'launching in 6...'

  # You can also use variables in log messages, to so you could do those
  # previous log entries all in one shot like this:
  missile_launch_timer < 6: log 'launching in #{missile_launch_timer}...'

  # As you can see, the "log" command just logs a message to the system log.

  # If you want to take more than one action on an event, you just need to put
  # them in a list after the selector..
  missile_launch_timer = 0:
    # The output command switches outputs on or off
    - missile_actuator = on
    - log 'MISSILES AWAY!'

  # by combining events with and you can make them fire only when both events
  # are true
  missile_key_a=on and missile_key_b=on:
    - log 'countdown commencing!'
    - log 'missile launch in 15 seconds!'
    - missile_launch_timer = 15s

  missile_abort_button = on:
    - emitif missile_actuator=on destruct_missiles
    - emitif missile_actuator=off cancel_launch

  cancel_launch:
    - canceltimer missile_launch_timer
    - log 'Launch aborted!'

  destruct_missiles:
    - output missile_self_destruct pulse
    - log 'Missiles destroyed!'
